name: Build executables and publish ðŸ“¦ to PyPI

on:
  workflow_dispatch:
  release:
    types:
      - "published"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - "windows-latest"
          - "macos-latest"
        python:
          - "3.10.x"
        cx-freeze:
          - "v6.13.1"
    name: "Build exe for ${{ matrix.os }}"
    runs-on: "${{ matrix.os }}"
    steps:

      # === SETUP ===

      - name: "Setup python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python }}"

      - name: "Install cx_Freeze bootloader"
        run: |
          python -m pip install cx_Freeze==${{ matrix.cx-freeze }}

      # === BUILD ===

      - name: "Clone repo"
        uses: "actions/checkout@v2"
        with:
          path: "./src/"

      - name: "Install requirements"
        run: |
          cd ./src/
          python -m pip install -U numpy
          python -m pip install -U -r ./requirements.txt

      - name: "Build"
        if: "runner.os != 'macOS'"
        run: |
          cd ./src/
          python ./buildGUI.py build
          mv ./build/*/ ./dist/

      - name: "Build macOS"
        if: "runner.os == 'macOS'"
        run: |
          cd ./src/
          python ./buildGUI.py bdist_mac
          mkdir ./dist/
          mv ./build/*.app/ ./dist/

      - name: "Resolve symlinks"
        if: "runner.os != 'Windows'"
        run: |
          cd ./src/dist/
          find ./ -type l -exec echo Resolving {} \; -exec sed -i '' {} \;

      - name: "Import macOS codesign certificate"
        if: "runner.os == 'macOS'"
        uses: "apple-actions/import-codesign-certs@v1"
        with:
          p12-file-base64: "${{ secrets.CODESIGN_P12_BASE64 }}"
          p12-password: "${{ secrets.CODESIGN_P12_PASSWORD }}"

      - name: "Codesign macOS"
        if: "runner.os == 'macOS'"
        run: |
          cd ./src/dist/
          find ./ -type f -empty -delete
          codesign -s "${{ secrets.CODESIGN_P12_NAME }}" --deep -f ./*.app

      # === ARTIFACT ===

      - name: "Zip artifact"
        run: |
          7z a -r ./${{ github.event.repository.name }}-${{ runner.os }}.zip ./src/dist/*

      - name: "Upload release artifact"
        uses: "softprops/action-gh-release@v1"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          files: "./${{ github.event.repository.name }}-${{ runner.os }}.zip"

  source:
    name: "package source"
    runs-on: "ubuntu-latest"
    steps:

      # === PACKAGE ===

      - name: "Clone repo"
        uses: "actions/checkout@v2"
        with:
          path: "./src"

      - name: "Package"
        run: |
          cd    ./src/
          mkdir ./dist/
          cp -r ./src/             ./dist/
          cp    ./LICENSE          ./dist/
          cp    ./main.py          ./dist/
          cp    ./requirements.txt ./dist/

      # === ARTIFACT ===

      - name: "Zip artifact"
        run: |
          7z a -r ./${{ github.event.repository.name }}-Source.zip ./src/dist/*

      - name: "Upload release artifact"
        uses: "softprops/action-gh-release@v1"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          files: "./${{ github.event.repository.name }}-Source.zip"

  release:
    name: "add artifacts to release"
    runs-on: "ubuntu-latest"
    needs:
      - build
      - source
    steps:

      - name: "Clone repo"
        uses: "actions/checkout@v2"
        with:
          path: "./src"

      - name: "Update release"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          cd ./src/
          python ./.github/workflow_data/release.py

  package-n-publish:
    name: Package and publish ðŸ“¦ to PyPI
    runs-on: ubuntu-latest
    steps:

    - name: "Clone repo"
      uses: "actions/checkout@v2"

    - name: "Setup python"
      uses: "actions/setup-python@v2"
      with:
        python-version: "3.10.x"

    - name: Install pypa/build
      run: >-
        python -m
        pip install
        build
        --user

    - name: Build a binary wheel and a source tarball
      run: >-
        python -m
        build
        --sdist
        --wheel
        --outdir dist/

    - name: "Upload wheel as release artifact"
      uses: "softprops/action-gh-release@v1"
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      with:
        files: "./dist/*.whl"

    - name: Publish distribution ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
